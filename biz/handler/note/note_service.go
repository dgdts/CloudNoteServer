// Code generated by hertz generator.

package note

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/dgdts/UniversalServer/biz/model/note"
	noteBiz "github.com/dgdts/UniversalServer/biz/note"
	"github.com/dgdts/UniversalServer/internal/response"
)

// CreateNote .
// @router /api/v1/notes [POST]
func CreateNote(ctx context.Context, c *app.RequestContext) {
	response.JSON(ctx, c, noteBiz.CreateNote)
}

// GetNote .
// @router /api/v1/notes/{id} [GET]
func GetNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req note.GetNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(note.GetNoteResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateNote .
// @router /api/v1/notes/{id} [PUT]
func UpdateNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req note.UpdateNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(note.UpdateNoteResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteNote .
// @router /api/v1/notes/{id} [DELETE]
func DeleteNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req note.DeleteNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(note.DeleteNoteResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListNotes .
// @router /api/v1/notes [GET]
func ListNotes(ctx context.Context, c *app.RequestContext) {
	response.JSON(ctx, c, noteBiz.ListNotes)
}

// GetNoteMeta .
// @router /api/v1/notes/{id}/meta [GET]
func GetNoteMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req note.GetNoteMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(note.GetNoteMetaResponse)

	c.JSON(consts.StatusOK, resp)
}

// ShareNote .
// @router /api/v1/notes/{id}/share [POST]
func ShareNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req note.ShareNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(note.ShareNoteResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetSharedNote .
// @router /api/v1/shared/{share_token} [GET]
func GetSharedNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req note.GetSharedNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(note.GetNoteResponse)

	c.JSON(consts.StatusOK, resp)
}
