// Code generated by hertz generator.

package auth

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	authBiz "github.com/dgdts/UniversalServer/biz/auth"
	auth "github.com/dgdts/UniversalServer/biz/model/auth"
	"github.com/dgdts/UniversalServer/internal/response"
)

// Login .
// @router /api/v1/auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := authBiz.Login(ctx, &req)
	if err != nil {
		response.JSONError(c, err)
		return
	}

	response.JSONSuccess(c, resp)
}

// RefreshToken .
// @router /api/v1/auth/refresh [POST]
func RefreshToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.RefreshTokenRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(auth.RefreshTokenResponse)

	c.JSON(consts.StatusOK, resp)
}

// Logout .
// @router /api/v1/auth/logout [POST]
func Logout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.LogoutRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(auth.LogoutResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetCurrentUser .
// @router /api/v1/users/me [GET]
func GetCurrentUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.GetCurrentUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(auth.User)

	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /api/v1/auth/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := authBiz.Register(ctx, &req)
	if err != nil {
		response.JSONError(c, err)
		return
	}

	response.JSONSuccess(c, resp)
}
